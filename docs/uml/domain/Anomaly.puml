@startuml

interface Anomaly {
  + anomalyId: Int
  + deviceId: DeviceId
  + getTimestamp(): Date
}

interface Exceeding {
  + getValue(): Float
  + getMeasure(): Measure
}

interface Intrusion {
  + getIntrusionObject(): ObjectClass
}

Exceeding *-- Anomaly
Intrusion *-- Anomaly

!startsub AnomalyRoot
interface AnomalyService {
    +getExceedings(): Promise<Exceeding[]>
    +getIntrusions(): Promise<Intrusion[]>
    +getAnomalyById(anomalyId: string): Promise<Anomaly>
    +insertExceeding(exceeding: Exceeding): Promise<string>
    +insertIntrusion(intrusion: Intrusion): Promise<string>
    +updateExceeding(exceeding: Exceeding): void
    +updateIntrusion(intrusion: Intrusion): void
    +deleteAnomaly(anomalyId: string, type: AnomalyType): void
}
!endsub AnomalyRoot

interface AnomalyFactory {
  + createIntrusion(): Intrusion
  + createExceeding(): Exceeding
}
AnomalyFactory --> Anomaly : creates
interface AnomalyRepository {
    +getExceedings(): Promise<Exceeding[]>
    +getIntrusions(): Promise<Intrusion[]>
    +getAnomalyById(anomalyId: string): Promise<Anomaly>
    +insertExceeding(exceeding: Exceeding): Promise<string>
    +insertIntrusion(intrusion: Intrusion): Promise<string>
    +updateExceeding(anomaly: Exceeding): Promise<void>
    +updateIntrusion(anomaly: Intrusion): Promise<void>
    +deleteAnomaly(anomalyId: string, type: AnomalyType): Promise<void>
}
AnomalyRepository o-up- Anomaly
AnomalyService --> AnomalyRepository : uses

@enduml
