@startuml

enum DeviceType {
  CAMERA
  SENSOR
}

interface DeviceId {
 + getType(): DeviceType
 + getCode(): String
}
DeviceId o-- DeviceType

interface Device {
 + deviceId: DeviceId
 + ipAddress: String
 + isCapturing(): Boolean
 + startCapturing(): void
 + stopCapturing(): void
}
Device o-right- DeviceId

interface DeviceFactory {
 + createSensor(): Sensor
 + createCamera(): Camera
}
DeviceFactory --> Device: creates

interface DeviceRepository {
    +getDevices(): Promise<Device[]>
    +getCapturingDevices(): Promise<Device[]>
    +getCameras(): Promise<Camera[]>
    +getSensors(): Promise<Sensor[]>
    +getDeviceById(deviceId: DeviceId): Promise<Device>
    +getCameraByCode(code: string): Promise<Camera>
    +getSensorByCode(code: string): Promise<Sensor>
    +insertCamera(camera: Camera): Promise<void>
    +insertSensor(sensor: Sensor): Promise<void>
    +updateCamera(camera: Camera): Promise<void>
    +updateSensor(sensor: Sensor): Promise<void>
    +deleteCamera(code: string): Promise<void>
    +deleteSensor(code: string): Promise<void>
}
DeviceRepository o-- Device

!startsub DeviceRoot

interface DeviceService {
    +getDevices(): Promise<Device[]>
    +getCapturingDevices(): Promise<Device[]>
    +getCameras(): Promise<Camera[]>
    +getSensors(): Promise<Sensor[]>
    +getDeviceById(deviceId: DeviceId): Promise<Device>
    +getCameraByCode(code: string): Promise<Camera>
    +getSensorByCode(code: string): Promise<Sensor>
    +insertCamera(camera: Camera): void
    +insertSensor(sensor: Sensor): void
    +updateCamera(camera: Camera): void
    +updateSensor(sensor: Sensor): void
    +deleteCamera(code: string): void
    +deleteSensor(code: string): void
}
!endsub DeviceRoot

DeviceService -left-> DeviceRepository: uses
DeviceService --> DeviceFactory: uses

interface Camera {
 + getResolution(): Resolution
}
Camera o-- Resolution
Device <|.. Camera
Device <|.. Sensor

interface Sensor {
 + getIntervalMillis(): Int
 + getMeasures(): Set<Measure>
 + addMeasure(): void
 + sendEnvironmentData(): void // to remove?
}
Sensor --> EnvironmentData : uses
Sensor o-- Measure


interface EnvironmentData {
 + getSourceDeviceId(): DeviceId
 + getValue(): Float
 + getMeasure(): Measure
 + getMeasureUnit(): MeasureUnit
 + getTimestamp(): Date
}

class Resolution {
 + height
 + width
}

enum Measure {
 HUMIDITY
 TEMPERATURE
 PRESSURE
}

enum MeasureUnit {
  PASCAL
  BAR
  CELSIUS
  FAHRENHEIT
  KELVIN
  PERCENTAGE
}
MeasureUnit -up-o EnvironmentData

@enduml
