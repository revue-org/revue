@startuml

!startsub LogRoot

interface LogService <<aggregate root>> {
  + getDataBySensorId(deviceId: DeviceId): Promise<EnvironmentData[]>
  + getLatestDataBySensorId(deviceId: DeviceId, quantity: number): Promise<EnvironmentData[]>
  + insertEnvironmentData(environmentData: EnvironmentData): void
}
!endsub LogRoot
LogService --> EnvironmentDataRepository : uses
LogService --> EnvironmentDataFactory : uses

interface EnvironmentDataRepository {
  + getEnvironmentData(): Promise<EnvironmentData[]>
  + getDataBySensorId(deviceId: DeviceId): Promise<EnvironmentData[]>
  + getLatestDataBySensorId(deviceId: DeviceId, quantity: number): Promise<EnvironmentData[]>
  + insertEnvironmentData(environmentData: EnvironmentData): Promise<void>
  + deleteEnvironmentData(id: string): Promise<void>
}
EnvironmentDataRepository o-- EnvironmentData

interface EnvironmentData {
 + getSourceDeviceId(): DeviceId
 + getValue(): Float
 + getMeasure(): Measure
 + getTimestamp(): Date
}

interface EnvironmentDataFactory {
    + createEnvironmentData(
      sourceDeviceId: DeviceId,
      value: number,
      measure: Measure,
      unit: MeasureUnit,
      timestamp: Date
    ): EnvironmentData
}
EnvironmentDataFactory -left-> EnvironmentData : creates

@enduml
