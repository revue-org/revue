@startuml


interface LogService <<aggregate root>> {
  + getDataBySensorId(deviceId: DeviceId): Promise<Measurement[]>
  + getLatestDataBySensorId(deviceId: DeviceId, quantity: number): Promise<Measurement[]>
  + insertMeasurement(environmentData: Measurement): void
}

interface NotificationRepository {
  + getNotifications(): Promise<Notification[]>
  + getNotificationById(notificationId: string): Promise<Notification>
  + insertExceedingNotification(notification: Notification): Promise<string>
  + insertIntrusionNotification(notification: Notification): Promise<string>
  + deleteNotification(notificationId: string): Promise<void>
}

interface AnomalyRepository {
    +getAnomalies(): Promise<Outlier[]>
    +getAnomalyById(anomalyId: string): Promise<Anomaly>
    +insertAnomaly(anomaly: Anomaly): Promise<AnomalyId>
    +deleteAnomaly(anomalyId: string): Promise<void>
}

interface MeasurementRepository

LogService --> MeasurementRepository : uses
LogService --> MeasurementFactory : uses

interface MeasurementRepository {
  + getMeasurements(): Promise<Measurement[]>
  + getMeasurementsBySensorId(deviceId: DeviceId): Promise<Measurement[]>
  + getLatestMeasurementsBySensorId(deviceId: DeviceId, quantity: number): Promise<Measurement[]>
  + insertMeasurement(environmentData: Measurement): Promise<void>
  + deleteMeasurement(id: string): Promise<void>
}
MeasurementRepository --> Measurement : stores

interface Measurement

interface MeasurementFactory {
    + createMeasurement(...): Measurement
}
MeasurementFactory -left-> Measurement : creates

@enduml
